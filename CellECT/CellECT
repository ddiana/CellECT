#!/usr/bin/env python

# Author: Diana Delibaltov
# Vision Research Lab, University of California Santa Barbara

# Imports

from PySide import QtGui
from PySide import QtCore
import sys
import os
import pdb
import re
import numpy as np
from scipy import misc
from scipy import io
from scipy.ndimage import morphology
import pickle
import os.path
import multiprocessing
import webbrowser
from scipy import io as spio
import glob
from os import path
import threading 

# Imports form this project

from CellECT.gui import mainGui
from CellECT.gui import newWorkspaceGui
from CellECT.workspace_management import metadata as md
from CellECT.workspace_management import workspace_data as wd
from CellECT.gui import about_window
from CellECT.gui import new_workspace
from CellECT.gui import meta_manager
from CellECT.workspace_management import workspace_creator
from CellECT.gui import display_progress_bar



class SimpleList(QtCore.QAbstractListModel):

	"""
	Abstract list model for the segmentations at each time point.
	"""


	def __init__(self, contents):
		super(SimpleList, self).__init__()
		self.contents = contents

	def rowCount(self, parent):
		return len(self.contents)

	def data(self, index, role):
		if role == QtCore.Qt.DisplayRole:
			return str(self.contents[index.row()])
		#return None


#	def removeRows(self,firstRow,rowCount,parent = QtCore.QModelIndex()):
#		self.beginRemoveRows(parent, firstRow, firstRow+rowCount-1)
#		while rowCount != 0:
#			del self._items[firstRow]
#			rowCount -= 1
#		self.endRemoveRows()        

#	def addItem(self, item):
#		self.beginInsertRows(QtCore.QModelIndex(), len(self._items), len(self._items))
#		self._items.append(item)
#		self.endInsertRows()
#        
#	def replaceItems(self, items):
#		self.removeRows(0,len(self._items))        
#		self.beginInsertRows(QtCore.QModelIndex(), len(self._items), len(self._items))
#		self._items = items
#		self.endInsertRows()


#	# the view is asking us to *change* some aspect of our data.
#	# as in the above, it can be any aspect of the data, not *just* the information contained in the model.
# 	# remember to return true if you handle a data change, and false otherwise, always!
#	# for more information, see:
#	# http://doc.trolltech.com/4.6/qabstractitemmodel.html#setData
#	def setData(self, index, value, role = QtCore.Qt.EditRole):
#		# You might be expecting Qt.DisplayRole here, but no.
#		# Qt.DisplayRole is the *displayed* value of an item, like, a formatted currency value: "$44.00"
#		# Qt.EditRole is the raw data of an item, e.g. "4400" (as in cents).
#		if role == QtCore.Qt.EditRole:
#			# set the data.
#			# the str() cast here is mostly for peace of mind, you can't perform some operations
#			# in python with Qt types, like pickling.
#			self.contents[index.row()] = value

#			# *always* emit the dataChanged() signal after changing any data inside the model.
#			# this is so e.g. the different views know they need to do things with it.
#			#
#			# don't be lazy and pass a huge range of values to this, because it is processing-heavy.
#			#
#			# because we are a simple list, we only have one index to worry about for topleft/bottom right,
#			# so just reuse the index we are passed.
#			QtCore.QObject.emit(self, QtCore.SIGNAL("dataChanged(const QModelIndex&, const QModelIndex &)"), index, index)
#			return True
#		# unhandled change.
#		return False
	
			

class MainWindow(QtGui.QMainWindow, mainGui.Ui_MainWindow):

	"""
	Main CellECT UI.
	"""

	update_progress = QtCore.Signal(int, str)
	throw_message = QtCore.Signal(str, str)
	update_list_of_segs = QtCore.Signal(int)

	def setup_ui_data(self):

		if self.workspace_data.metadata.numt:
			self.horizontalSlider_t.setMaximum(self.workspace_data.metadata.numt-1)
			self.horizontalSlider_z.setMaximum(self.workspace_data.metadata.numz-1)
		else:
			self.horizontalSlider_t.setMaximum(0)
			self.horizontalSlider_z.setMaximum(0)

		self.set_images()

		self.populate_segmentation_checklist_list()

		try:
			self.workspace_data.metadata.populate_metadata_boxes(self)
		except:
			pass

		self.list_view_selection_model = self.listView.selectionModel()

		self.list_view_selection_model.selectionChanged.connect(self.time_selected_in_list)



	def __init__(self, parent=None):
		super(MainWindow, self).__init__(parent)


		self.has_open_ws = False


		# setupUI needs to be called to setup the UI designed with QT Designer
		self.setupUi(self)

		self.workspace_data = wd.WorkSpaceData()

		self.setup_ui_data()


		# connect actions to functions
		self.actionRun_Segmentation_Tool.triggered.connect(self.run_CellECT_seg_tool)
		self.actionRun_Tracking_Tool.triggered.connect( self.run_CellECT_track_tool)
		self.actionGitHub_Repo.triggered.connect( self.goto_repo)
		self.actionOpen_Workspace.triggered.connect( self.open_workspace)
		self.actionAbout.triggered.connect(self.show_about)
		self.actionNew_Workspace.triggered.connect(self.show_new_workspace)
		self.actionPreliminary_Segmentation.triggered.connect(self.run_preliminary_seg)
		self.actionAppend_Workspace.triggered.connect(self.append_workspace)

		self.actionExit.triggered.connect(self.exit_app)


		# connect buttons
		self.btn_preliminary_seg.clicked.connect(self.run_preliminary_seg)
		self.btn_seg_tool.clicked.connect(self.run_CellECT_seg_tool)
		self.btn_track_tool.clicked.connect(self.run_CellECT_track_tool)
		self.btn_select_all.clicked.connect(self.listView.selectAll)
		self.btn_save_metadata.clicked.connect(self.save_metadata_to_file)
		
		self.meta_manager = meta_manager.ManageMetadataInUI(self, self.workspace_data.metadata)

		# images
		self.horizontalSlider_t.valueChanged.connect(self.set_images)
		self.horizontalSlider_z.valueChanged.connect(self.set_images)


		# connect my own signals
		self.update_list_of_segs.connect(self.update_list_item)


	def copy_fles_to_ws(self, source_dir, dest_dir, file_search_format, file_name_regex, offset):

		for item in glob.iglob(source_dir + "/" + file_search_format):

			file_name = path.split(item)[1]
			rex = re.match(file_name_regex, file_name)
			time_stamp = int(rex.group(2)) + offset
			new_file_name = rex.group(1) + str(time_stamp) + rex.group(3)

			command = "cp %s/%s %s/%s" % ( source_dir, file_name, dest_dir, new_file_name)  

			print command
			try:
				os.system(command)
			except Exception as err:
				raise err

			

		

	def copy_files_from_appended_ws(self, ws, offset):


		#### copy init_watershed_all_time_stamps files:

		# copy init_ws_%d.mat files
		self.copy_fles_to_ws(ws.workspace_location + "/init_watershed_all_time_stamps/", self.workspace_data.workspace_location + "/init_watershed_all_time_stamps/", "init_ws_*.mat", "(init_ws_)([0-9]*)(.*)", offset )		
		self.update_progress.emit(20, "Copying files.")

		# copy time_stamp_%d_nuclei.mat files
		self.copy_fles_to_ws(ws.workspace_location + "/init_watershed_all_time_stamps/", self.workspace_data.workspace_location + "/init_watershed_all_time_stamps/", "time_stamp_*_nuclei.mat", "(time_stamp_)([0-9]*)(.*)", offset )		
		self.update_progress.emit(30, "Copying files.")

		# copy vol_nuclei_t_%d.mat files
		self.copy_fles_to_ws(ws.workspace_location + "/init_watershed_all_time_stamps/", self.workspace_data.workspace_location + "/init_watershed_all_time_stamps/", "vol_nuclei_t_*.mat", "(vol_nuclei_t_)([0-9]*)(.*)", offset )		
		self.update_progress.emit(40,"Copying files.")

		# vol_t_%d.mat files
		self.copy_fles_to_ws(ws.workspace_location + "/init_watershed_all_time_stamps/", self.workspace_data.workspace_location + "/init_watershed_all_time_stamps/", "vol_t_*.mat", "(vol_t_)([0-9]*)(.*)", offset )		
		self.update_progress.emit(50, "Copying files.")

		#### copy input_slices files:

		# copy %d.tif files
		offset_tif = self.workspace_data.metadata.numz * offset *self.workspace_data.metadata.numch
		self.copy_fles_to_ws(ws.workspace_location + "/input_slices/", self.workspace_data.workspace_location + "/input_slices/", "*.tif", "()([0-9]*)(.*)", offset_tif )		
		self.update_progress.emit(60, "Copying files.")

		#### copy segs_all_time_stamps files:

		# copy timestamp_%d..... files
		self.copy_fles_to_ws(ws.workspace_location + "/segs_all_time_stamps/", self.workspace_data.workspace_location + "/segs_all_time_stamps/", "timestamp_*", "(timestamp_)([0-9]*)(.*)", offset )		
		self.update_progress.emit(80, "Finished copying files. Continuing..")
		

	def get_has_bg(self):

		# open config file of time point 0 and check has_bg flag
		file_name = self.workspace_data.workspace_location + "/config_files/timestamp_0.cnf"
		with open(file_name, "r") as f:
			line = f.readline()
			while line is not None:
				rex = re.match("(.*)=(.*)", line)
				if (rex is not None) and (rex.group(1).strip() == "has_bg"):
					return int(rex.group(2).strip())
				line = f.readline()


	def get_exception_across_thread(self, window_title, message):
		QtGui.QMessageBox.information(self, window_title, message)

		


	def append_workspace_processing(self, filename):

		try:


			self.update_progress.connect(self.update_progress_window) 

			self.update_progress.emit(5, "Retrieving available segmentations.")

			temp_ws_data = wd.WorkSpaceData()
			temp_ws_data.load_workspace(filename)
			temp_ws_data.set_location(filename)		
			temp_ws_data.get_available_segs()

			self.update_progress.emit(10, "Updating metadata.")

			time_offset = self.workspace_data.metadata.numt

			self.workspace_data.append_workspace(temp_ws_data)
			self.update_progress.emit(15, "Copying files.")
		
			self.copy_files_from_appended_ws(temp_ws_data, time_offset)
			self.update_progress.emit(90, "Preparing configuration files.")
			
			# write config files
			# make temp object to use the config file writing function from that class
			temp = workspace_creator.WorkspaceCreator()
			temp.metadata = self.workspace_data.metadata
			temp.has_bg = self.get_has_bg()
			temp.ws_location = self.workspace_data.workspace_location
			temp.write_config_files(xrange(time_offset, self.workspace_data.metadata.numt))
			self.update_progress.emit(95, "Saving workspace file.")

			self.workspace_data.write_xml()
			self.update_progress.emit(100, "Finished")

			self.has_open_ws = True

		except Exception as err:
			self.throw_message.connect(self.get_exception_across_thread)
			self.throw_message.emit("CellECT Append Workspace", "Could not open workspace. Error: %s" % err)

			self.update_progress.emit(-1, "Failed")
	


	def update_progress_window(self, val, text):

		self.progress_window.set_progress(val, text)
		if val == 100:
			self.progress_window.close()
			self.open_cws_file(self.workspace_data.workspace_location + "/workspace_data.cws")

		if val == -1:
			self. progress_window.close()

	def append_workspace(self):


		if not self.has_open_ws:
			QtGui.QMessageBox.information(self, "CellECT Append Workspace", "No workspace is currently open.")
			return

		# Use the stock Qt dialog to look for VTK files.
		filename, _ = QtGui.QFileDialog.getOpenFileName(self, 'Open file', os.curdir, "*.cws", modal=False)

		if len(filename) >0:
			try:
				self.progress_window = display_progress_bar.DisplayProgress(self)
				self.progress_window.show()
			

				thr = threading.Thread(target = self.append_workspace_processing, args = [filename])
				thr.start()
					
				
		

			except Exception as err:
				QtGui.QMessageBox.information(self, "CellECT Append Workspace", "Could not append workspace. Error: %s" % err)



	def save_metadata_to_file(self):

		"""
		Save info from metadata boxes to csv file.
		"""

		filename, _ = QtGui.QFileDialog.getSaveFileName(self, 'Save file', os.curdir, "*.csv")

		if filename[-4:] != ".csv":
			filename += ".csv"

		try:
			self.workspace_data.metadata.save_csv_file(filename)		
		except Exception as err:
			QtGui.QMessageBox.information(self, "CellECT Open Workspace", "Could not save metadata to csv file. Error: %s" % err)

		
	def goto_repo(self):

		"""
		Open github repo in default browser.
		"""

		try:
			webbrowser.open_new_tab("http://github.com/ddiana/CellECT")
		except Exception as err:
			QtGui.QMessageBox.information(self, "CellECT Open Repository", "Could not open repository. Error: %s" % err)


	def open_workspace(self):

		"""
		Open window to select cws file.
		"""

		# Use the stock Qt dialog to look for VTK files.
		filename, _ = QtGui.QFileDialog.getOpenFileName(self, 'Open file', os.curdir, "*.cws")

		if not len(filename):
			return 

		try:
			self.open_cws_file(filename)
		except Exception as err:
			QtGui.QMessageBox.information(self, "CellECT Open Workspace", "Could not open workspace. Error: %s" % err)



	def open_cws_file(self, filename):

		"""
		Load workspace from selected cws file.
		"""

		#self.workspace_data = pickle.load( open( filename, "rb" ) )

		self.workspace_data.load_workspace(filename)
		self.workspace_data.set_location(filename)		
		self.workspace_data.get_available_segs()
	

		self.setup_ui_data()

		self.horizontalSlider_z.setValue(int(self. workspace_data.metadata.numz /2))	
		self.has_open_ws = True
		

		print filename



	def time_selected_in_list(self):

		"""
		Update time slider to the time selected from the list.
		"""

		try:
			current_selection = self.listView.selectionModel().selectedIndexes()[-1].row()
		except:
			current_selection = 0

		self.horizontalSlider_t.setValue(current_selection)



		
	def write_tracker_config_file(self, selected_indices):

		"""
		Write config file to run tracker app when tracker is run.
		"""

		file_name = "%s/tracker_config/config_file_tracker.cnf" % self.workspace_data.workspace_location
		with open(file_name,'w') as f:

		
			z_scale = float(self.workspace_data.metadata.zres) / float( self.workspace_data.metadata.xres)
			f.write('z-scale = %d\n' % z_scale)

			f.write("time-stamps = ")
			for i in selected_indices:
				f.write("%d " % i.row())
		

			# TODO tracker relative path

			f.write("\nsegs-path = segs_all_time_stamps\n")
			f.write('z-slices-per-stack = %d\n' %  self.workspace_data.metadata.numz)
			f.write('tif-slices-path = input_slices/\n')
			f.write('gui-thumbnail-path = gui_thumbnails/\n')
			f.write('cell-association-distance-threshold = 200\n')
			f.write('max-cell-growth-rate = 1.3\n')
			f.write("number-channels = %d\n" % self.workspace_data.metadata.numch)
			f.write("membrane-channel = %d\n" % self.workspace_data.metadata.memch )

	
		return file_name

	def set_images(self):

		"""
		Update images from panel when Z or T was changed.
		"""
		
		#print "t: %d, z: %d" % (self.horizontalSlider_t.value(), self.horizontalSlider_z.value())

		try:
			index = self.model.index(self.horizontalSlider_t.value(),0)
			self.listView.selectionModel().setCurrentIndex(index,  QtGui.QItemSelectionModel.ClearAndSelect)
		except:
			pass




		if self.workspace_data.workspace_location:

			i = (self.horizontalSlider_t.value() ) * self.workspace_data.metadata.numz*self.workspace_data.metadata.numch + self.horizontalSlider_z.value()*self.workspace_data.metadata.numch+1
			img1_full_size = misc.imread("%s/input_slices/%d.tif" % (self.workspace_data.workspace_location, i))	
			img1_full_size = img1_full_size.astype("float")/np.max(img1_full_size)*255

			max_size = 500
			factor = min(1, 500./ max(img1_full_size.shape) )

			img1 = img1_full_size
			if factor != 1:
				img1 = misc.imresize(img1_full_size, (int(img1_full_size.shape[0]*factor), int(img1_full_size.shape[1]*factor)))

			

			# if there is a nuclear channel image
			if self.workspace_data.metadata.numch>1:			
	
				img2_full_size = misc.imread("%s/input_slices/%d.tif"  % (self.workspace_data.workspace_location, i+1))	
				img2_full_size = img2_full_size.astype("float")/np.max(img2_full_size)*255
				img2 = misc.imresize(img2_full_size, (int(img2_full_size.shape[0]*factor), int(img2_full_size.shape[1]*factor)))
				
			else:
				img2 = np.zeros_like(img1)		
				img2_full_size = np.zeros_like(img1_full_size)
		
			img3 = np.zeros_like(img2)
			img = np.dstack([img1, img2, img3])

			
			misc.imsave("temp_slice.jpg", img)
			image1 = QtGui.QImage("temp_slice.jpg")
	
			self.label_original_image.setPixmap(QtGui.QPixmap.fromImage(image1))

		
			# if there is a segmentation
			try:

				seg_img = io.loadmat("%s/segs_all_time_stamps/timestamp_%d_label_map.mat" % ( self.workspace_data.workspace_location, self.horizontalSlider_t.value()))["ws"][:,:,self.horizontalSlider_z.value()]

				img3_full_size = np.zeros_like(img1_full_size)
				img_full_size = np.dstack([img1_full_size, img2_full_size, img3_full_size])

				borders_mask = np.uint(seg_img<1)
				borders_mask = morphology.binary_dilation( borders_mask, np.ones((3,3)))
				borders_mask = np.dstack([borders_mask, borders_mask, borders_mask])
				seg_img = img_full_size * (1-borders_mask) + 255*borders_mask
				misc.imsave("temp_seg.jpg", seg_img)
				image2 = QtGui.QImage("temp_seg.jpg")
			except:
				image2 = image1

			self.label_segmented_image.setPixmap(QtGui.QPixmap.fromImage(image2))


	def update_list_item(self,index):


		file_name = "%s/segs_all_time_stamps/timestamp_%d_label_map.mat" % (self.workspace_data.workspace_location, index)
   		if os.path.exists(file_name):
			status = " has segmentation"
		else:
			status = " failed"

		self.listView.model().contents[index] += status


	def call_cellect_seg_tool_preliminary(self, config_file_location, index):

		"""
		Run preliminary seg tool, without any user interaction.
		"""		


		command = 'CellECT_seg_tool -m -i -f %s' % config_file_location
		print command
		os.system(command)

#		import time
#		print "sleeping"
#		time.sleep(10)
#		print "done sleeping"
		self.update_list_of_segs.emit(index)
		



#		#print self.model.contents[index]
	#	self.listView.model().contents[index] += " has segmentation"
#		self.listView.update()
		




#		command = 'CellECT_seg_tool -m -i -f %s' % config_file_location
#		print command
#		os.system(command)

#	
#		print "FINISHED"
#		#print self.model.contents[index] 
#		self.model.contents[index] += " has segmentation"
#		#self.listView.model.contents[index] += "has segmentation"
#		self.listView().update()
#		
#		#model_index = self.model.index(index,0)
#		#self.model.setData(model_index, new_value)
#		#self.model = SimpleList(self.model.contents)
#		#self.listView.setModel(self.model)
#		print self.listView.model.contents[index]



##		self.model.dataChanged.emit(index, index)
#		#self.listView.show()




	def run_preliminary_seg(self):
	
		"""
		Open gnome-terminal and run CellECT_seg_tool and sleep 1 sec in preliminary segmentation mode
		"""


		if len(self.listView.selectionModel().selectedIndexes()):
			segmentation_indexes = [ index.row() for index in self.listView.selectionModel().selectedIndexes()]
		else:
			QtGui.QMessageBox.information(self, "CellECT Preliminary Segmentation", "Please select one or more time points to run the segmentation on.")
			return

		valid_indexes = []
		invalid_indexes = []

		for index in segmentation_indexes:
			if re.search("[.]*has segmentation",self.model.contents[index]):
				invalid_indexes.append(index)
			else:
				valid_indexes.append(index)

		if len(valid_indexes):
			if len(invalid_indexes):
				message = "The following selected time stamps already have a segmentation result: %s. Perform preliminary segmentation on the remaining time stamps?" % str(invalid_indexes)[1:-1]
				reply = QtGui.QMessageBox.question(self, "CellECT Preliminary Segmentation", message, QtGui.QMessageBox.Yes | QtGui.QMessageBox.No, QtGui.QMessageBox.No)
				if reply == QtGui.QMessageBox.No:
					return
  
		else:
			QtGui.QMessageBox.information(self, "CellECT Preliminary Segmentation", "All the selected time stamps already have a segmentation result.")
			return



		for index in valid_indexes:
			config_file_location =  "%s/config_files/timestamp_%d.cnf" % (self.workspace_data.workspace_location, index)
		
			p = threading.Thread(target = self.call_cellect_seg_tool_preliminary, args=(config_file_location, index))
			p.start()

			
			print config_file_location





	def run_CellECT_seg_tool(self):

		"""
		Open gnome-terminal and run CellECT_seg_tool and sleep 1 sec
		"""

		sleep_time = 5

		if len(self.listView.selectionModel().selectedIndexes()):
			if len(self.listView.selectionModel().selectedIndexes()) > 1:
				QtGui.QMessageBox.information(self, "CellECT Segmentation Tool", "Please select ONLY ONE time point to run the interactive segmentation on.")
			else:
				segmentation_index =  self.listView.selectionModel().selectedIndexes()[-1].row()
		else:
			QtGui.QMessageBox.information(self, "CellECT Segmentation Tool", "Please select the time point to run the interactive segmentation on.")
			return


		config_file_location =  "%s/config_files/timestamp_%d.cnf" % (self.workspace_data.workspace_location, segmentation_index)


		use_metric = ""		
		if not self.checkBox_use_metric.isChecked():

			use_metric = "-m"
		else:

			try:
				training_data_location = "%s/training_data/positive_example.mat" % self.workspace_data.workspace_location
				spio.loadmat(training_data_location)
				training_data_location = '%s/training_data/negative_example.mat' % self.workspace_data.workspace_location
				spio.loadmat(training_data_location)
			except:
				use_metric = "-m"
				QtGui.QMessageBox.information(self, "CellECT Segmentation Tool", "No training data available. Running without cellness metric.")



		command = 'gnome-terminal -x sh -c "CellECT_seg_tool %s -f %s ; sleep %d"' %  (use_metric, config_file_location, sleep_time)
		print command
		os.system(command)


	def run_CellECT_track_tool(self):

		"""
		Open gnome-terminal and run CellECT_track_tool and sleep 1 sec
		"""

		if len(self.listView.selectionModel().selectedIndexes()) <2:
			QtGui.QMessageBox.information(self, "CellECT Tracking Tool", "Please select two or more time points to run the interactive segmentation on.")
			return


		for i in self.listView.selectionModel().selectedIndexes():


			if not i.row() in self.workspace_data.available_segs:
				QtGui.QMessageBox.information(self, "CellECT Tracking Tool", "Tracking can only be performed on available segmentations.")

				break


		config_file_location = self.write_tracker_config_file(self.listView.selectionModel().selectedIndexes())

		command = 'gnome-terminal -x sh -c "CellECT_track_tool %s; sleep 10"' % config_file_location
		print command
		os.system(command)



	def populate_segmentation_checklist_list(self):

		#self.listWidget.addItems(['test','test','test','test','test','test','test'])

		list_items = []

		if self.workspace_data.metadata.numt:

			for i in xrange(self.workspace_data.metadata.numt):
				if i in self.workspace_data.available_segs:
					list_item = "Volume at t=%d has segmentation" % i

				else:
					list_item = "Volume at t=%d" %i

				list_items.append(list_item)

		self.model = SimpleList(list_items)
	
		
		self.listView.setModel(self.model)
		self.listView.show()


	def exit_app(self):

		
		sys.exit(0)

	def show_about(self):

		form = about_window.AboutWindow(self)
		form.show()

	def show_new_workspace(self):

		form = new_workspace.NewWorkspaceWindow(self)
		form.show()

		


app = QtGui.QApplication(sys.argv)
form = MainWindow()
form.show()
app.exec_()
