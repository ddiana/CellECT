#!/usr/bin/env python

# Author: Diana Delibaltov
# Vision Research Lab, University of California Santa Barbara

# Module information
import CellECT.seg_tool.module_info

# Imports
import pdb
import numpy as np
import scipy.io as spio
from PyML import VectorDataSet
import sys
from termcolor import colored
import os
import time
import logging
import datetime
from optparse import OptionParser
import matplotlib

## memory inspection tool
#from memory_profiler import profile


# Imports from this project
from CellECT.seg_tool.seg_io import load_parameters as loader
from CellECT.seg_tool.cellness_metric import cellness_classifier as cellness
from CellECT.seg_tool.seg_io import load_all
from CellECT.seg_tool.nuclei_collection import nuclei_collection as nc
from CellECT.seg_tool.seed_segment_collection import seed_segment_collection as ssc
from CellECT.seg_tool.seed_collection import seed_collection as seedc
from CellECT.seg_tool.features import segment_features as feat
from CellECT.seg_tool.seg_utils import call_silent
from CellECT.seg_tool.seg_io import save_all
from CellECT.seg_tool.seg_utils import labelmap_tools as lm_tools
from CellECT.seg_tool.run_watershed import run_watershed as ws
from CellECT.seg_tool.cellness_metric import split_predictor as split_pred



import CellECT.seg_tool.globals


"""
Main sequence of events of the seg_tool, the interactive segmentation tool 
from the CellECT (Cell Evolution Capturing Tool) project.
"""


def setup_logging():

	logging.basicConfig(filename='CellECT_seg_tool.log', level=logging.INFO)
	message = " =============================== Starting CellECT_seg_tool ============================================"
	logging.info (message)
	logging.info('Started at %s' % datetime.datetime.now().strftime("%Y-%m-%d %H:%M") )


def ask_for_config_file():

	print colored("Please provide location of configuration file.", "red")
	import Tkinter, tkFileDialog

	root = Tkinter.Tk()
	root.withdraw()
	file_path = tkFileDialog.askopenfilename()
	root.destroy()

	return file_path




def parse_input():



	parser = OptionParser()
	parser.add_option("-f", "--config_file", dest="filename", help="Specify configuration file.", default="", metavar="FILE")
	parser.add_option("-i", "--no_interactive", action="store_true", dest="no_interactive", default=False, help="Ask user for feedback.")
	parser.add_option("-m", "--no_cellness_metric", action="store_true", dest="no_cellness_metric", default=False, help="Predict bad segments.")
	parser.add_option("-b", "--bisque", action="store_true", dest="bisque", default=False, help="Run on bisque server.")
	parser.add_option("-c", "--cleanup_seg", action="store_true", default=False, help="Load saved segmentation, clean up, resave.")
	parser.add_option("-s", "--load_saved", action="store_true", default=False, help="Load latest saved segmentation if any.")

	(options, args) = parser.parse_args()

	CellECT.seg_tool.globals.DEFAULT_PARAMETER["no_interactive"] = options.no_interactive
	CellECT.seg_tool.globals.DEFAULT_PARAMETER["no_cellness_metric"] = options.no_cellness_metric
	CellECT.seg_tool.globals.DEFAULT_PARAMETER["bisque"] = options.bisque
	CellECT.seg_tool.globals.DEFAULT_PARAMETER["cleanup_seg"] = options.cleanup_seg
	CellECT.seg_tool.globals.DEFAULT_PARAMETER["load_saved"] = options.load_saved

	if options.cleanup_seg:
		CellECT.seg_tool.globals.DEFAULT_PARAMETER["no_interactive"] = True
		CellECT.seg_tool.globals.DEFAULT_PARAMETER["no_cellness_metric"] = True
		CellECT.seg_tool.globals.DEFAULT_PARAMETER["bisque"] = False
		CellECT.seg_tool.globals.DEFAULT_PARAMETER["load_saved"] = True

	if options.filename == "":
		config_file_path = ask_for_config_file()
	else:
		config_file_path = options.filename
	return config_file_path


	
#@profile
def main():


	setup_logging()
	
	config_file_path = parse_input()

	## READ AND SET PARAMETERS #################################################
	
	print "Loading config parameters..."
	loader.read_program_parameters(config_file_path)

	## LOADING TRAINING DATA AND TRAINING CLASSIFIER ###########################

	cellness_metric = cellness.CellnessMetric()
	if not CellECT.seg_tool.globals.DEFAULT_PARAMETER["no_cellness_metric"]:

		print colored("================================================================================",'red')
		print colored("              Loading training data and training cellness metric:", 'red')
		print colored("================================================================================",'red')
	
		
		cellness.load_generic_training_data(cellness_metric)
		cellness_metric.train()


	## LOADING DATA FOR CURRENT VOLUME #########################################
	
	print colored("================================================================================",'red')
	print colored("                            Processing test volume:",'red')
	print colored("================================================================================",'red')
	
	print "Loading test volume..."
	vol = load_all.load_from_mat(CellECT.seg_tool.globals.DEFAULT_PARAMETER["volume_mat_path"], CellECT.seg_tool.globals.DEFAULT_PARAMETER["volume_mat_var"])
	bg_seeds = set()

#	try:
#		print "Loading background seeds..."
#		bg_seeds = load_all.load_from_mat(CellECT.seg_tool.globals.DEFAULT_PARAMETER["bg_seeds_path"], CellECT.seg_tool.globals.DEFAULT_PARAMETER["bg_seeds_var"])
#		bg_seeds = set((tuple(x) for x in bg_seeds))   # from nparray to set
#	except:
#		print "No background seeds."
	


	# load nuclei channel volume, if available
	vol_nuclei = None
	try:
		vol_nuclei = load_all.load_from_mat(CellECT.seg_tool.globals.DEFAULT_PARAMETER["volume_nuclei_mat_path"], CellECT.seg_tool.globals.DEFAULT_PARAMETER["volume_nuclei_mat_var"])
	except:
		print "Warning: Did not find nuclei channel volume."
		logging.warning("Did not find nuclei channel volume.")


	# TODO: if nuclear channel, subtract that from membrane channel.
	
	#watershed = shuffle_labels(watershed)

	print "Loading nuclei..."
	
	nuclei_collection = nc.NucleusCollection()
	if not CellECT.seg_tool.globals.DEFAULT_PARAMETER["load_saved"]:
		nuclei_collection = nc.NucleusCollection(CellECT.seg_tool.globals.DEFAULT_PARAMETER["nuclei_mat_path"], CellECT.seg_tool.globals.DEFAULT_PARAMETER["nuclei_mat_var"])

	
	seed_collection = seedc.SeedCollection([])

	bg_prior = None
	# background prior comes from propag

	# load AP axis if any 

	CellECT.seg_tool.globals.DEFAULT_PARAMETER["APaxis"] = []


	if os.path.isfile(CellECT.seg_tool.globals.DEFAULT_PARAMETER["ap_axis_file"]):

		
		with open(CellECT.seg_tool.globals.DEFAULT_PARAMETER["ap_axis_file"]) as ap_file: 
			pts = ap_file.readline()

			while pts:
				pts = pts.split(',')
				pts = [pt.strip() for pt in pts]
				if pts[0] != '':
					CellECT.seg_tool.globals.DEFAULT_PARAMETER["APaxis"].append([int(pt) for pt in pts])
				pts = ap_file.readline()


	if len(CellECT.seg_tool.globals.DEFAULT_PARAMETER["APaxis"]) == 0:
		CellECT.seg_tool.globals.DEFAULT_PARAMETER["APaxis"].append([0,0,0])
		CellECT.seg_tool.globals.DEFAULT_PARAMETER["APaxis"].append([0, vol.shape[1], 0])


	print "Loading initial segmentation if any..."


	if not CellECT.seg_tool.globals.DEFAULT_PARAMETER["load_saved"]:
		try:		
			watershed = load_all.load_from_mat(CellECT.seg_tool.globals.DEFAULT_PARAMETER["first_seg_mat_path"], CellECT.seg_tool.globals.DEFAULT_PARAMETER["first_seg_mat_var"])
		except:
	
			print "No initial segmentation found... Making initial segmentation."

			if len(nuclei_collection.nuclei_list) == 0:
				watershed = np.ones(vol.shape, "uint16")
			else:
				# input pts
				init_pts = ws.make_list_of_seed_groups(nuclei_collection, seed_collection)

				# load bg_prior if any 

				bg_prior = None
				try:
					bg_prior = load_all.load_from_mat(CellECT.seg_tool.globals.DEFAULT_PARAMETER["bg_seeds_path"], 'bg_mask')
				except:
					print "Could not load background mask."
					bg_prior = None

				# make first seg
				watershed = ws.run_watershed(vol, init_pts, bg_seeds, bg_prior)
				# save it so that it does not need to be computed again
				call_silent.call_silent_err(spio.savemat, CellECT.seg_tool.globals.DEFAULT_PARAMETER["first_seg_mat_path"], { CellECT.seg_tool.globals.DEFAULT_PARAMETER["first_seg_mat_var"]: watershed})

	else:
		watershed = np.ones(vol.shape, "uint16")

	last_length_of_seeds_list = 0 

	# obsolete... keeping this as dummy variable.
	seed_segment_collection = ssc.SeedSegmentCollection()


	ask_feedback = True


	watershed_old = watershed

	CellECT.seg_tool.globals.should_load_last_save
	CellECT.seg_tool.globals.should_load_last_save = CellECT.seg_tool.globals.DEFAULT_PARAMETER["load_saved"]

	split_predicted = None	

	## MAIN LOOP ###############################################################
	sum_new = None

	made_changes = False

	if CellECT.seg_tool.globals.DEFAULT_PARAMETER["cleanup_seg"]:

		nuclei_collection, seed_collection, watershed, bg_seeds, bg_prior = load_all.load_last_save()
	
		print "Preparing data for classifier..."

		set_of_labels = set(int(x) for x in np.unique(watershed) if x > 1)	
		collection_of_ws_segments = feat.get_segments_with_features(vol, watershed, set_of_labels, "test_volume", nuclei_collection)
		#test_data = cellness.prepare_test_data(collection_of_ws_segments)

		too_small_segments = filter(lambda x: x.feature_dict["size"]<20, collection_of_ws_segments.list_of_segments)

		labels_too_small = [segment.label for segment in too_small_segments]


		if len(labels_too_small)>0:
			from CellECT.seg_tool.gui import parse_feedback as gui_parse
			gui_parse.parse_to_delete_predictions(labels_too_small, collection_of_ws_segments, nuclei_collection, set())

			init_pts = ws.make_list_of_seed_groups(nuclei_collection, seed_collection)

			watershed = ws.run_watershed(vol, init_pts, bg_seeds, bg_prior)

			set_of_labels = set(int(x) for x in np.unique(watershed) if x > 1)	

			collection_of_ws_segments = feat.get_segments_with_features(vol, watershed, set_of_labels, "test_volume", nuclei_collection)


#		class_prediction = [0 for i in xrange(len(set_of_labels))]
#		discriminant_value = [1 for i in xrange(len(set_of_labels))]
#		classified_segments = (set_of_labels, class_prediction, discriminant_value)


		



	else:

		while (ask_feedback or CellECT.seg_tool.globals.should_load_last_save):


			## Load last save, or continue with current setup ######################
			if CellECT.seg_tool.globals.should_load_last_save:
				nuclei_collection, seed_collection, watershed, bg_seeds, bg_prior = load_all.load_last_save()
				#seed_segment_collection.update_seed_segment_collection(seed_segment_collection, watershed, seed_collection)
				#watershed = recolor_label_map_correctly (watershed, nuclei_collection, seed_collection, collection_of_ws_segments, seed_segment_collection)
	
				CellECT.seg_tool.globals.should_load_last_save = False

			## Prepare cellness metric #############################################


			print "Preparing data for classifier..."

			set_of_labels = set(int(x) for x in np.unique(watershed) if x > 1)	

			#original_init_pts = ws.make_list_of_seed_groups(nuclei_collection)

			collection_of_ws_segments = feat.get_segments_with_features(vol, watershed, set_of_labels, "test_volume", nuclei_collection)
			#test_data = cellness.prepare_test_data(collection_of_ws_segments)

			## Apply cellness metric ###############################################



			if not 	CellECT.seg_tool.globals.DEFAULT_PARAMETER["no_cellness_metric"]:

			
				#test_data_svm = call_silent.call_silent_process(VectorDataSet, test_data)

				#generic_classifier = cellness.prepare_SVM(generic_training_data, generic_training_labels)

				print "Applying cellness metric to segments..."
				class_prediction = []
				discriminant_value = []

			
				for segment in collection_of_ws_segments.list_of_segments:
					prd, disc = cellness_metric.test_segment(segment)
					class_prediction.append(prd)
					discriminant_value.append(disc)
				#class_prediction, discriminant_value = cellness.classify_segments(generic_classifier,test_data) #test_data_svm)

			
				classified_segments = (set_of_labels, class_prediction, discriminant_value)

			else:

				class_prediction = [0 for i in xrange(len(set_of_labels))]
				discriminant_value = [1 for i in xrange(len(set_of_labels))]
				classified_segments = (set_of_labels, class_prediction, discriminant_value)
			



			## ASK FOR FEEDBACK ####################################################

			print "Prompting user for feedback..."	

			correct_labels = set()
			correct_segments = set()

			if CellECT.seg_tool.globals.DEFAULT_PARAMETER["bisque"]:
				# TODO: bisque UI

				from CellECT.seg_tool.bisque.bisque_io import segments_xml
				from CellECT.seg_tool.bisque.bisque_io import talk_to_ui

				print colored("BISQUE UI","red")
				logging.info("BISQUE UI.")
				talk_to_ui.wait_for_UI_update()

			all_user_feedback = []


			if not CellECT.seg_tool.globals.DEFAULT_PARAMETER["no_interactive"]:

				if CellECT.seg_tool.globals.DEFAULT_PARAMETER["bisque"]:
					# TODO: bisque UI
					from CellECT.seg_tool.bisque.bisque_io import segments_xml
					from CellECT.seg_tool.bisque.bisque_io import talk_to_ui
					print colored("BISQUE UI","red")
					logging.info("BISQUE UI.")
					talk_to_ui.wait_for_UI_update()

				else:
					import pylab
					from CellECT.seg_tool.gui import main_gui
					from CellECT.seg_tool.gui import parse_feedback as gui_parse
					from CellECT.seg_tool.seg_utils import display_tools
					logging.info("DESKTOP CLIENT ")

					# split predict too slow, not using this anymore.
					#split_predicted = split_pred.SplitPredict(vol,watershed, collection_of_ws_segments)
					all_user_feedback, to_merge_predicted, to_delete_predicted = main_gui.show_uncertainty_map_and_get_feedback( vol, watershed, collection_of_ws_segments, classified_segments, nuclei_collection, seed_collection, seed_segment_collection, watershed_old, correct_labels, bg_seeds, bg_prior, vol_nuclei=vol_nuclei)


					for label in correct_labels:

						idx = collection_of_ws_segments.segment_label_to_list_index_dict[label]
						correct_segments.add(collection_of_ws_segments.list_of_segments[idx])

					cellness_metric.add_training_examples(correct_segments, ["Correct" for label in correct_labels], False)
					cellness_metric.train()

			## USE FEEDBACK ########################################################

			if not CellECT.seg_tool.globals.should_load_last_save:


				old_number_of_nuclei = len(nuclei_collection.nuclei_list)
				old_number_of_seeds = len(seed_collection.list_of_seeds)
	
				incorrect_segments = set()

			

				if not CellECT.seg_tool.globals.DEFAULT_PARAMETER["no_interactive"]:

					print "Processing user feedback..."
					# Get feedback #####################################################
					if CellECT.seg_tool.globals.DEFAULT_PARAMETER["bisque"]:
						# TODO: bisque UI parser
						print colored("BISQUE UI PARSER","red")
						logging.info("BISQUE UI PARSER.")
						made_changes = False
					else:
						logging.info("DESKTOP CLIENT UI PARSER.")
						old_len_bg_seeds = len(bg_seeds)
						made_changes = gui_parse.parse_user_feedback(watershed, nuclei_collection, collection_of_ws_segments, seed_collection, all_user_feedback, incorrect_segments, bg_seeds, to_delete_predicted)	

						if len(to_merge_predicted):
							made_changes = True
							gui_parse.parse_to_merge_predictions(to_merge_predicted, collection_of_ws_segments, nuclei_collection, incorrect_segments)


						if len(to_delete_predicted):
							made_changes = True
							gui_parse.parse_to_delete_predictions(to_delete_predicted, collection_of_ws_segments, nuclei_collection, incorrect_segments)



						if old_len_bg_seeds != len(bg_seeds):
							made_changes = True
				
				else:
					made_changes = False
		
				new_number_of_nuclei = len(nuclei_collection.nuclei_list)
				new_number_of_seeds = len(seed_collection.list_of_seeds)

				## Apply Feedback ##################################################
	
	
				if made_changes:

				

					init_pts = ws.make_list_of_seed_groups(nuclei_collection, seed_collection)
					#call_silent_err( show_new_user_points,original_init_pts, init_pts)

					watershed_old = watershed

					cellness_metric.add_training_examples(list(incorrect_segments), ["Incorrect" for i in xrange(len(incorrect_segments))], True )

					cellness_metric.train()


					## Rerun Watershed if necessary ################################
					if True: #old_number_of_nuclei != new_number_of_nuclei or old_number_of_seeds != new_number_of_seeds or old_len_bg_seeds != len(bg_seeds):
				
						watershed = ws.run_watershed(vol, init_pts, bg_seeds, bg_prior)
						#seed_segment_collection.update_seed_segment_collection(seed_segment_collection, watershed, seed_collection)


					#watershed = lm_tools.recolor_label_map_correctly (watershed, nuclei_collection, seed_collection, collection_of_ws_segments, seed_segment_collection)

				else:
					ask_feedback = False



#	## Show final output #######################################################
#	if not CellECT.seg_tool.globals.DEFAULT_PARAMETER["no_interactive"]:
#		if not CellECT.seg_tool.globals.DEFAULT_PARAMETER["bisque"]:
#			display_tools.display_volume_two(vol, watershed)
#		else:
#			logging.info("Not displaying final volume (bisque).")


	## Ask if save #############################################################
	should_save = ""
	if CellECT.seg_tool.globals.DEFAULT_PARAMETER["bisque"]:
		should_save = "y"
		logging.info("Not prompting user for saving (bisque).")
		CellECT.seg_tool.bisque.bisque_io.segments_xml.write_bisque_segments_xml(nuclei_collection, seed_collection, collection_of_ws_segments, seed_segment_collection, watershed)
	elif CellECT.seg_tool.globals.DEFAULT_PARAMETER["no_interactive"]:
		should_save = "y"
	else:
		while not should_save in set(['y', 'n']):
			print colored("Save latest result? [Y/N] ","red")
			should_save = sys.stdin.read(1)
			should_save = should_save.lower()
			print ""


	## Save ####################################################################

	if should_save.lower() == "y":
		save_all.save_current_status(nuclei_collection, seed_collection, collection_of_ws_segments, seed_segment_collection, watershed, bg_seeds, bg_prior)
		if  CellECT.seg_tool.globals.DEFAULT_PARAMETER["bisque"]:
			CellECT.seg_tool.bisque.bisque_io.segments_xml.write_bisque_segments_xml(nuclei_collection, seed_collection, collection_of_ws_segments, seed_segment_collection, watershed)

	else:
		print "Not saving."
	
	logging.info('Exitted normally at %s' % datetime.datetime.now().strftime("%Y-%m-%d %H:%M") )
	print "KTnxBye."


	


if __name__ == "__main__":



	try:
		main()
		sys.exit(0)

	except Exception as err:
		logging.error(err)
		sys.exit(1)




